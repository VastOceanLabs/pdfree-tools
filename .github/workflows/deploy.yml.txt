# =============================================================================
# GITHUB ACTIONS DEPLOYMENT WORKFLOW
# Save as: .github/workflows/deploy.yml
# =============================================================================

name: Deploy to Cloudflare Pages

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Build application (branch-aware)
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then 
            echo "Building for production..."
            npm run build:production
          elif [[ "${GITHUB_REF##*/}" == "staging" ]]; then 
            echo "Building for staging..."
            npm run build:staging
          else 
            echo "Building for preview..."
            npm run build:preview
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: pdffree-tools
          directory: out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Separate job for deploying workers
  deploy-workers:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' # Only deploy workers on main branch
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Deploy Cleanup Worker
        run: |
          cd src/workers/cleanup
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Rate Limit Worker  
        run: |
          cd src/workers/rate-limit
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}